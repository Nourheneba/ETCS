# -*- coding: utf-8 -*-
"""
Created on Mon Jul  1 09:30:20 2019

@author: nbenacho
"""
import numpy as np
import math
from laspy import file as File
import os
import matplotlib as style
import matplotlib.pyplot as plt
from matplotlib.figure import Figure
import tkinter as tk
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

#GroundFiltred_Segment_Cloud.las
fileName = "GroundFiltred_Segment_Cloud_filtrePct_PreFilter70.las"

inFile = File.File(fileName, mode="r")
point_records = inFile.points

dataset = np.vstack([inFile.x, inFile.y, inFile.z, inFile.intensity]).transpose()

# Bornes dalle LIDAR
Xmin = inFile.header.min[0]
Xmax = inFile.header.max[0]
Ymin = inFile.header.min[1]
Ymax = inFile.header.max[1]

Zmin = inFile.header.min[2]
Zmax = inFile.header.max[2]

# distance between  max and min
distance_x = Xmax - Xmin
distance_y = Ymax - Ymin

# fixe step
stpx = 0.08
stpy = 0.25

# nbr Cells
nbCellX = int(math.ceil(distance_x / stpx))
nbCellY = int(math.ceil(distance_y / stpy))

print("nbCellX",nbCellX)
print("nbCellY",nbCellY)

s = (nbCellX, nbCellY)
w, h = nbCellX, nbCellY


matrix = [[0 for y in range(h)] for x in range(w)]
i = 0

#********************************DÃ©coupage en cellules*************************
for p in dataset:
    calcX = p[0]
    valeurXFromRef = calcX - Xmin

    calcY = p[1] 
    valeurYFromRef = calcY - Ymin

    calcZ = p[2]
    
    x = divmod(valeurXFromRef, stpx)
    celluleX = int(x[0])
    y = divmod(valeurYFromRef, stpy)
    celluleY = int(y[0])
    
    #print("cellule (X,Y;Z)  (", celluleX ,",", celluleY ,";", calcZ,")\n")
    celluleCourante = matrix[celluleX][celluleY]
 
    if (celluleCourante == 0):
        # if cell is empty
        cellule = [None] * 7
        # liste des points      
        listePoints = []
        
        listePoints.append((i, calcX, calcY, calcZ))
        cellule[0] = listePoints
        # Zmin
        cellule[1] = calcZ
        # Zmax
        cellule[2] = calcZ
        # Nb points
        # cellule[3] = len(listePoints)
        cellule[3] = 1
        
        cellule[4] = calcZ
        
        # Moyenne des Z
        cellule[5] = cellule[4]/cellule[3]
        
#        #intensity
#        cellule[6] = 1
#        cellule[7] = p[3]/cellule[6]
        matrix[celluleX][celluleY] = cellule
        
        cellule[6] = 0

    else:

        listePoints = celluleCourante[0]
        zMinCellule = celluleCourante[1]
        zMaxCellule = celluleCourante[2]

        listePoints.append((i, calcX, calcY,calcZ))
        celluleCourante[0] = listePoints
        if (calcZ > zMaxCellule):
            celluleCourante[2] = calcZ
        if (calcZ < zMinCellule):
            celluleCourante[1] = calcZ
        # Nb points
        celluleCourante[3] = celluleCourante[3] + 1
        # Somme des Z
        celluleCourante[4] = celluleCourante[4] + calcZ
        # Moyenne Z
        celluleCourante[5] = celluleCourante[4]/celluleCourante[3]
#        #intensity
#        # Somme
#        celluleCourante[6] = celluleCourante[6] + p[3]
#        # Moyenne 
#        celluleCourante[7] = celluleCourante[6]/celluleCourante[3]
        
        matrix[celluleX][celluleY] = celluleCourante        
        celluleCourante[6] = 0
    i = i + 1
   

#****************Calcule de la Zmoyenne Max et Min de la dalle*****************
#
sumGeneralMax = 0
sumGeneralMin = 0
k = 0

for indexCelluleX in range(nbCellX):
    for indexCelluleY in range(nbCellY):
        cell = matrix[indexCelluleX][indexCelluleY]
        if cell != 0 :
            k = k + 1
            sumGeneralMax = sumGeneralMax + cell[2]
            sumGeneralMin = sumGeneralMin + cell[1]
            
moyGeneralMax =  sumGeneralMax/k     
moyGeneralMin =  sumGeneralMin/k   

print("moyGeneralMax",moyGeneralMax)       
print("moyGeneralMin",moyGeneralMin)           
        
#******************************************************************************
#***********Calcule de la Difference entre Z cellueSuiv et Z celluleCour*******


d = np.array([0])
x = np.array([0])

yRes = np.array([0])
pointsIndex = []
celluleNonSupp = []

#intensities = np.array([0])
#axeX = np.array([0])

#indexCelluleY = 70
indexCelluleY = 0
diff=0
for indexCelluleX in range(nbCellX-1):
   
    celluleCourante = matrix[indexCelluleX][indexCelluleY] 
    celluleSuiv = matrix[indexCelluleX+1][indexCelluleY]
    
    
    dtype = [('index', int), ('X', float), ('Y', float), ('Z', float)]
    restype = [('index', int) , ('diff', float)]
    celltype = [('x', int) , ('y', float)]

    if celluleCourante == 0  or  celluleSuiv == 0:
        
        diff = 0

        d = np.append(d, diff)
        x = np.append(x, indexCelluleX)

#        intensities = np.append(intensities, 0)
#        axeX = np.append(axeX, indexCelluleX)
       
    elif celluleCourante != 0 and celluleSuiv != 0 :
        
#        print("celluleCourante Moyenne Top",celluleCourante[6],"\n Moyenne Totale" ,celluleCourante[5])
#        print("celluleSuiv Moyenne Top",celluleSuiv[6] , "\n Moyenne Totale" ,celluleSuiv[5])
  
        diff =  abs(celluleSuiv[5] - celluleCourante[5]) 

        
#        print("celluleCourante (",indexCelluleX ,";",indexCelluleY,") : ",celluleCourante[5] ,"\n" )
#        print("celluleSuiv (",indexCelluleX+1 ,";",indexCelluleY,") : ",celluleSuiv[5] ,"\n" )
#        print(" Diff = " , diff,"\n" )
        
        pts = np.array(celluleCourante[0], dtype=dtype)
        
        d = np.append(d, diff)
        x = np.append(x, indexCelluleX)
#        diffInt = abs(celluleSuiv[7] - celluleCourante[7])
#        intensities = np.append(intensities, diffInt)
#        axeX = np.append(axeX, indexCelluleX)
        
        
#        if diffInt >= 10 :
    if diff <= 0.20 and diff >= 0.04 :
        celluleCourante[6] = 1
        for index in range(pts.size):
            c = pts[index]   
            pointsIndex.append(c[0])      
    
    matrix[indexCelluleX][indexCelluleY] = celluleCourante
    


#*************************** Corriger les trous *******************************
def propagation_droite(matrix,nbCellX):
    indexCelluleY = 0
    diff = 0
    pts = []
    print ("propagation_droite")
    for indexCelluleX in range(nbCellX-1):
        celluleCourante = matrix[indexCelluleX][indexCelluleY]
        bo = True
        k = 0;
        if celluleCourante != 0 and celluleCourante[6] == 1 :
            
            index = indexCelluleX+1
            i = 1
            celluleSuiv = matrix[index][indexCelluleY]
            
            while celluleSuiv[6] == 0 and i<=3 and bo == True :
                diff = abs(celluleCourante[5] - celluleSuiv[5])
                if( diff <= 0.05 ):
                    print ("==> diff ", diff)
                    k = k+1
                    
                else : 
                    bo = False
                index += 1
                celluleCourante = matrix[index][indexCelluleY]
                celluleSuiv = matrix[index+1][indexCelluleY]
                i += 1

            if(k == 3):
                index = 0
                while index <= 2 :
#                    cell = matrix[indexCelluleX+index][indexCelluleY]
                    print ("==>", indexCelluleX+index)                     
                    pts.append([indexCelluleX+index,indexCelluleY]) 
                    index += 1
    return pts



#
#def propagation_gauche(matrix,nbCellX):
#    indexCelluleY = 0
#    diff = 0
#    pts = []
#    print ("propagation_droite")
#    for indexCelluleX in range(nbCellX-1):
#        celluleCourante = matrix[indexCelluleX][indexCelluleY]
#
#        if celluleCourante != 0 and celluleCourante[6] == 1  and indexCelluleX > 3:
#            celluleprec = matrix[indexCelluleX-1][indexCelluleY]
#            index = indexCelluleX-1
#            i = 1
#            bo = True
#            while celluleprec[6] == 0 and i<=3 and bo == True:
#                diff = celluleCourante[5] - celluleprec[5]
#                if( diff > 0.03 ):
#                    bo = False
#                index -= 1
#                celluleCourante = matrix[index][indexCelluleY]
#                celluleprec = matrix[index-1][indexCelluleY]
#                i += 1
#            print ("==>", i)
#            print ("==>", bo)
#            
#            if(bo == True):
#                index = 3
#                while index >= 0 :
#                    print ("==>", indexCelluleX-index)
#                    pts.append([indexCelluleX+index,indexCelluleY]) 
#                    index -= 1
#    return pts

#indexCelluleY = 0
#ptsIndex = []
#
#diff = 0
#for indexCelluleX in range(nbCellX-1):
#   
#    celluleCourante = matrix[indexCelluleX][indexCelluleY]
#    
#    celluleSuiv = matrix[indexCelluleX+1][indexCelluleY]
#    celluleprec = matrix[indexCelluleX-1][indexCelluleY]
#    dtype = [('index', int), ('X', float), ('Y', float), ('Z', float)]
#    
#    if celluleCourante != 0 and celluleCourante[6] != 0 :
#        
##        print("celluleprec  : ",str(celluleprec[6]) ,"\n" )
##        print("celluleCourante  : ",str(celluleCourante[6]) ,"\n" )
##        print("celluleSuiv  : ",str(celluleSuiv[6]) ,"\n" )
#    
#        if celluleCourante[6] == 1 :
#            print("celluleCourante[6] == 1")
#            pts = np.array(celluleCourante[0], dtype=dtype)
#            continue
#        
#        if celluleCourante[6] == 0 :
#            print("celluleCourante[6] == 0")
#            diffR = abs(celluleSuiv[5] - celluleCourante[5]) 
#            diffL = abs(celluleCourante[5] - celluleprec[5]) 
#            print("diffR", diffR)
#            print("diffL", diffL)
#            
#            pts = np.array(celluleCourante[0], dtype=dtype)
#            
#            if (diffR <= 0.002 and diffL <= 0.002) :
#                celluleCourante[6] = 1
#                for index in range(pts.size):
#                    c = pts[index]   
#                    ptsIndex.append(c[0])      
#    
#        matrix[indexCelluleX][indexCelluleY] = celluleCourante
#            
#            if (diffR <= 0.03 and diffL <= 0.03) :
#                ptsIndex.append([indexCelluleX, indexCelluleY])
#                
#
#
##**************************************************************************
#for index in ptsIndex:               
#    celluleCourante = matrix[index[0]][index[1]]
#    celluleCourante[6] = 1
#    matrix[index[0]][index[1]] = celluleCourante


                    

#**********************************  Test Quai   ******************************

#resIndex = []
#indexCelluleY = 0
#for indexCelluleX in range(nbCellX-3):
#   
#    celluleCourante = matrix[indexCelluleX][indexCelluleY]
#    
#    if(celluleCourante!=0 and celluleCourante[6] == 1):
#        print("Cellule (",indexCelluleX ,";",indexCelluleY,") : ",celluleCourante[5] ,"\n" )
#        sumRcell = 0
#        moyRcell = 0
#        sumLcell = 0
#        moyLcell = 0
#        lft = 0.0
#        r = 0.0
#        nbl = 0
#        nbr = 0
#        #left side
#        for i in range(indexCelluleX-3,indexCelluleX) :
#            print("i = ",i) 
#            
#            if matrix[i][indexCelluleY] == 0:
#                break
#            if matrix[i][indexCelluleY] != 0 :
#               cl = matrix[i][indexCelluleY]
#               sumLcell = (sumLcell + abs(cl[5]))
#               nbl += 1
#               
#            moyLcell = sumLcell/nbl
##            print("moyLcell = ",moyLcell) 
##            print("nbl = ",nbl)
##            
#        #right side
#        for j in range(indexCelluleX+3,indexCelluleX, -1) :
#            print("j = ",j)              
#            if matrix[j][indexCelluleY] == 0:
#                break
#            if matrix[j][indexCelluleY] != 0 :
#                cr = matrix[j][indexCelluleY]
#                sumRcell = (sumRcell + abs(cr[5]))
#                nbr += 1
#            moyRcell = sumRcell/nbr
##            print("moyRcell = ",moyRcell)
##            print("nbr = ",nbr)
##        if moyRcell != 0.0 and moyLcell !=0.0 :
#        r = abs(celluleCourante[5] - moyRcell)
#        lft = abs(celluleCourante[5] - moyLcell)
#        print("Right = ",r)
#        print("Left = ",lft)
#
#        dtype = [('index', int), ('X', float), ('Y', float), ('Z', float)]
#        resPts = np.array(celluleCourante[0], dtype=dtype)
#
##            print("Res",resPts)
#        if( r <= 0.002 and lft <= 0.002 ):
#            celluleCourante[6] = 0
#            matrix[indexCelluleX][indexCelluleY] = celluleCourante
##            for idx in range(resPts.size):
##                p = resPts[idx]
##                #print("Point",c)
##                resIndex.append(p[0])            

pt = propagation_droite (matrix,nbCellX) 


for index in pt:               
    celluleCourante = matrix[index[0]][index[1]]
    celluleCourante[6] = 0
    matrix[index[0]][index[1]] = celluleCourante

#*************************** Indices points *******************************
            
_, ext = os.path.splitext(fileName)
def affichage_points(matrix, nbCellX,ext ):   
    finalPoint = []  
    indexCelluleY = 0

    for indexCelluleX in range(nbCellX):
       
        celluleCourante = matrix[indexCelluleX][indexCelluleY]
        
        if  celluleCourante != 0 and celluleCourante[6] == 1 :
                     
            dtype = [('index', int), ('X', float), ('Y', float), ('Z', float)]
            pr = np.array(celluleCourante[0], dtype=dtype)
            
            for index in range(pr.size):
                c = pr[index]   
                finalPoint.append(c[0]) 
                
    
    res_file = str(_+"_Res"+ext)
    outFile3 = File.File(res_file, mode = "w", header = inFile.header)
    outFile3.points = point_records[finalPoint]
    outFile3.close()

affichage_points(matrix, nbCellX,ext )       
#********************Enregistrer 2 fichiers Coupe et resultat******************     
        
#_, ext = os.path.splitext(fileName)
#
#new_file = str(_+"_FiltredCrr"+ext)
#outFile2 = File.File(new_file, mode = "w", header = inFile.header)
#outFile2.points = point_records[ptsIndex]
#outFile2.close()
#
#res_file = str(_+"_Res"+ext)
#outFile3 = File.File(res_file, mode = "w", header = inFile.header)
#outFile3.points = point_records[finalPoint]
#outFile3.close()


#****************************** Dessiner graphe *******************************
        
plt.plot(x, d);

plt.grid(True)
#plt.axis([120,250,0,0.5])
plt.savefig("GrapheLine250"+str(indexCelluleY)+"X"+str(stpx)+"Y"+str(stpy)+".png")


            

            



